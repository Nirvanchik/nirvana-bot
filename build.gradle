plugins {
    id 'java'
    id 'maven'
    id 'application'
}

group = 'org.wikipedia'
version = '1.0'

description = """"""

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    // Uncomment to see deprecations
    // options.deprecation = true
}

repositories {
        
     maven { url "https://repo.maven.apache.org/maven2" }
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.10'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.10'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.10.8'
    implementation 'org.apache.commons:commons-lang3:3.5'
    implementation 'commons-collections:commons-collections:3.2.2'
    implementation 'org.apache.logging.log4j:log4j-api:2.16.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.16.0'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    annotationProcessor 'org.apache.logging.log4j:log4j-core:2.16.0'

    compileOnly 'javax.servlet:javax.servlet-api:4.0.1'

    testImplementation 'com.googlecode.json-simple:json-simple:1.1.1'
    testImplementation 'org.mockito:mockito-all:1.10.19'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'com.github.tomakehurst:wiremock-jre8-standalone:2.25.1'
}

jar {
    manifest {
        attributes 'Main-Class': 'org.wikipedia.nirvana.nirvanabot.NirvanaBot'
    }
}

mainClassName = 'org.wikipedia.nirvana.nirvanabot.NirvanaBot'
executableDir = 'bin'

task createStatisticsBotRunApp(type: CreateStartScripts) {
    mainClassName = 'org.wikipedia.nirvana.statistics.StatisticsBot'
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
    applicationName = 'statistics-bot'
    defaultJvmOpts = startScripts.defaultJvmOpts
}

task createArchiveBotRunApp(type: CreateStartScripts) {
    mainClassName = 'org.wikipedia.nirvana.fixarchive.FixArchiveBot'
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
    applicationName = 'archive-bot'
    defaultJvmOpts = startScripts.defaultJvmOpts
}

task createCleanArchiveBotRunApp(type: CreateStartScripts) {
    mainClassName = 'org.wikipedia.nirvana.cleanarchive.CleanArchiveBot'
    classpath = startScripts.classpath
    outputDir = startScripts.outputDir
    applicationName = 'clean-archive-bot'
    defaultJvmOpts = startScripts.defaultJvmOpts
}

applicationDistribution.into('bin') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(createStatisticsBotRunApp, createArchiveBotRunApp, createCleanArchiveBotRunApp)
    fileMode = 0755
}

distributions {
    main {
        baseName = 'NirvanaBot'
        contents {
            from('.') {
                include (
                    '*.cmd',
                    'README.MD', 'README_RU.MD', 'release-notes-ru.txt',
                    '*.xml',
                    'COPYING', 'NOTICE', 'Apache_License.txt',
                    'task.txt', 'task_debug.txt', 'task_debug_be.txt', 'task_debug_uk.txt')
                exclude 'loginNirvanaBot.xml', 'loginNirvanaTestBot.xml', 'pom.xml'
            }
            from('statistics') {
                include ('*')
                into('statistics')
            }
            from('config') {
                include ('*.properties')
                into ('config')
            }
            from('translations') {
                include ('*.ini')
                into ('translations')
            }
            from('templates') {
                include ('*')
                into ('templates')
            }
        }
    }
}

afterEvaluate { project ->
    // To correctly put files with Cyrillic file names in zip.
    distZip.metadataCharset = 'UTF-8'
}

tasks.create('dist7z') {
    group = 'distribution'
    description = 'Bundles the project as a distribution to 7z (the same as distZip).'
    Task distZipTask = tasks['distZip']
    dependsOn distZipTask

    doLast {
        logger.lifecycle "Unzip distribution: ${distZipTask.archivePath}"
        def sevenZip = '7z'
        def tmpDir = "${project.buildDir}/7z"
        mkdir tmpDir
        exec {
            executable '7z'
            args 'x', distZipTask.archivePath
            workingDir tmpDir
            standardOutput System.out
            errorOutput System.err
        }
        def archive = distZipTask.archivePath.path.replace('.zip', '.7z')
        logger.lifecycle "Compress to 7z: ${archive}"
        exec {
            executable '7z'
            args 'a', archive, distZipTask.archiveName.replace('.zip','')
            workingDir tmpDir
            standardOutput System.out
            errorOutput System.err
        }
        delete tmpDir
    }
}

